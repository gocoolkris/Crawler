package edu.upenn.cis455.components;

import edu.upenn.cis455.crawler.CrawlerThread;
import edu.upenn.cis455.globaldata.GlobalData;

public class ThreadPool {

	static Thread[] pool = null;
	
	public ThreadPool(Queue q){
		CrawlerThread.setUrlQueue(q);
		pool = new Thread[GlobalData.CRAWLER_THREADCOUNT];
		for(int i = 0; i < pool.length; ++i){
			pool[i] = new Thread(new CrawlerThread());
		}
	}
	
	public void startThreadPool(){
		for(int i = 0; i < GlobalData.CRAWLER_THREADCOUNT; ++i){
			pool[i].start();
		}
	}
	
	/**
	 * @return true if any of the threads of the Thread pool is alive.
	 */
	public boolean threadsAlive(){
		for(int i = 0; i < GlobalData.CRAWLER_THREADCOUNT; ++i){
			if(pool[i].isAlive()) return true;
		}
		return false;
	}
	
	
	public boolean shutdownThreadPool(){
		try{
			System.out.println("shudownCommandReceived");
			for(int i = 0; i < GlobalData.CRAWLER_THREADCOUNT; ++i){
				pool[i].interrupt();
			}
			while(threadsAlive());
			System.out.println("Threadpool shutdown");
			return true;
			}
			catch(Exception e){return false;}
		}
	
	
}
