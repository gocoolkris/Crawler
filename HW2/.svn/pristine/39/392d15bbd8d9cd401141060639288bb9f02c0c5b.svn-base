package edu.upenn.cis455.components;

import java.util.Date;
import java.util.HashSet;

public class CrawlDelayTable {


	private static HashSet<CrawlDelay> domainDelayList = new HashSet<CrawlDelay>();
	private static Object crawldelaylock = new Object();


	public void addDomainDelay(String domainname, int delay){
		synchronized(crawldelaylock){
			CrawlDelay cd = new CrawlDelay(domainname, delay);
			domainDelayList.add(cd);
		}
	}

	public boolean hasEntry(String dmn){
		synchronized(crawldelaylock){
			for(CrawlDelay cd : domainDelayList){
				if(cd.domain.equals(dmn)) return true;
			}
			return false;
		}
	}

	public long getWaitingTimeIfAny(String domainname){
		synchronized(crawldelaylock){
			for(CrawlDelay cd : domainDelayList){
				if(cd.domain.equals(domainname)){
					long delay = cd.crawldelay * 1000;
					long elapsedTimeSinceLastRequest = (new Date().getTime()) - cd.lastAccessed.getTime();
					if(elapsedTimeSinceLastRequest >= delay) return 0;
					else return (delay - elapsedTimeSinceLastRequest);
				}
			}
			return 0;
		}
	}

	public void updateNowAsLastAccessedTime(String domainname){
		synchronized(crawldelaylock){
			for(CrawlDelay cd : domainDelayList){
				if(cd.domain.equals(domainname)){
					cd.updateNowAsLastAccessed();
					return;
				}
			}
		}
	}



	public class CrawlDelay{

		String domain;
		int crawldelay;
		Date lastAccessed;
		public CrawlDelay(String dom, int delay){
			domain = dom;
			crawldelay = delay;
			lastAccessed = new Date();
		}

		public void updateNowAsLastAccessed(){
			lastAccessed = new Date();
		}

	}
}
