package edu.upenn.cis455.database;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;

import com.sleepycat.je.Environment;
import com.sleepycat.persist.EntityCursor;
import com.sleepycat.persist.EntityStore;
import com.sleepycat.persist.PrimaryIndex;

import edu.upenn.cis455.dbobjects.ChannelContent;

public class ChannelContentService {

	public ChannelContentService(){}
	
	private EntityStore store;
	private Environment env;
	private PrimaryIndex<String, ChannelContent> chid_url;
	public ChannelContentService(EntityStore store, Environment e){
		this.store = store;
		this.env = e;
		chid_url = store.getPrimaryIndex(String.class, ChannelContent.class);
	}
	
	public void addDocument(String channelid, String url){
		try{
			ChannelContent c = chid_url.get(channelid);
			if(c == null){
				c = new ChannelContent();
				c.setChannelid(channelid);
				c.addUrlToList(url);
			}
			else{
				c.addUrlToList(url);
			}
			chid_url.put(c);
			env.sync();
			
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void removeDocument(String channelid, String url){
		try{
			EntityCursor<ChannelContent> list = chid_url.entities();
			for(ChannelContent c : list){
				if(c.getChannelid().equals(channelid)){
					HashSet<String> urls = c.getUrlList();
					urls.remove(url);
					chid_url.put(c);
					env.sync();
					return;
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 
	 * @param channelid - the id for which the urls are to be collected.
	 * @return
	 */
	public HashSet<String> getChannelUrls(String channelid){
		try{
			ChannelContent c = chid_url.get(channelid);
			HashSet<String> list = c.getUrlList();
			return list;
		}catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}
	
	public HashMap<String,HashSet<String>> allDocumentUrl(){
		HashMap<String,HashSet<String>> cid_urlList = 
				new HashMap<String,HashSet<String>>();
		try{
			EntityCursor<ChannelContent> contents = chid_url.entities();
			for(ChannelContent c : contents){
				cid_urlList.put(c.getChannelid(), c.getUrlList());
			}
			return cid_urlList;
		}catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}

	public void printDocuments(){
		try{
			EntityCursor<ChannelContent> cidurl = chid_url.entities();
			for(ChannelContent c : cidurl){
				StringBuffer s = new StringBuffer();
				for(String url : c.getUrlList()){
					s.append(url + "\n");
				}
				System.out.println(c.getChannelid()+":" + s.toString());
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	
}
